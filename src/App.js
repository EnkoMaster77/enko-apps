// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ React ‡πÅ‡∏•‡∏∞ useEffect/useState
import React, { useEffect, useState } from 'react';

// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô firebase.js
import { db } from './firebase';

// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Firestore ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
import { collection, getDocs } from 'firebase/firestore';

function App() {
  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏à‡∏≤‡∏Å Firestore
  const [materials, setMaterials] = useState([]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  useEffect(() => {
    const fetchData = async () => {
      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å collection ‡∏ä‡∏∑‡πà‡∏≠ 'materials'
        const querySnapshot = await getDocs(collection(db, 'materials'));

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏à‡∏≤‡∏Å document ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        const items = querySnapshot.docs.map((doc) => {
          return {
            id: doc.id,
            ...doc.data(), // ‡∏£‡∏ß‡∏° name, buy, sell ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
          };
        });

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á state
        setMaterials(items);
      } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
      }
    };

    fetchData();
  }, []);

  return (
    <div style={{ padding: '2rem', fontFamily: 'sans-serif' }}>
      <h2 style={{ textAlign: 'center' }}>üìã ENKO - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏</h2>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏™‡∏î‡∏∏ */}
      <table width="100%" border="1" cellPadding="8" style={{ borderCollapse: 'collapse', marginTop: '1rem' }}>
        <thead>
          <tr style={{ backgroundColor: '#f2f2f2' }}>
            <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏™‡∏î‡∏∏</th>
            <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.)</th>
            <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.)</th>
            <th>‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô</th>
          </tr>
        </thead>
        <tbody>
          {materials.map((item) => {
            const buy = parseFloat(item.buy);
            const sell = parseFloat(item.sell);
            const profit = sell - buy;
            const profitText = profit >= 0 ? `+${profit.toFixed(2)}` : `-${Math.abs(profit).toFixed(2)}`;
            const color = profit >= 0 ? 'green' : 'red';

            return (
              <tr key={item.id}>
                <td>{item.name}</td>
                <td>{buy.toFixed(2)}</td>
                <td>{sell.toFixed(2)}</td>
                <td style={{ color }}>{profitText} ‡∏ö‡∏≤‡∏ó</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}

export default App;
