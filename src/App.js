import React, { useEffect, useState } from 'react';
import { db } from './firebase';
import { collection, getDocs, addDoc } from 'firebase/firestore';

function App() {
  const [materials, setMaterials] = useState([]);
  const [newMaterial, setNewMaterial] = useState({ name: '', buy: '', sell: '' });

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase
  const fetchMaterials = async () => {
    try {
      const snapshot = await getDocs(collection(db, 'materials'));
      const data = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      }));
      setMaterials(data);
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    }
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ Firestore
  const handleAdd = async () => {
    const { name, buy, sell } = newMaterial;
    if (!name || !buy || !sell) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á');
      return;
    }

    try {
      await addDoc(collection(db, 'materials'), {
        name,
        buy,
        sell,
      });
      setNewMaterial({ name: '', buy: '', sell: '' });
      fetchMaterials();
    } catch (error) {
      console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    }
  };

  useEffect(() => {
    fetchMaterials();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£
  const getProfit = (buy, sell) => {
    const b = parseFloat(buy);
    const s = parseFloat(sell);
    const diff = s - b;
    const percent = ((diff / b) * 100).toFixed(1);
    return {
      text: `${diff.toFixed(2)} ‡∏ö‡∏≤‡∏ó (${percent}%)`,
      color: diff >= 0 ? 'green' : 'red',
    };
  };

  return (
    <div style={{ padding: '20px', fontFamily: 'sans-serif' }}>
      <h2>üì¶ ENKO - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏</h2>

      <div style={{ display: 'flex', gap: '10px', marginBottom: '20px' }}>
        <input
          placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏™‡∏î‡∏∏ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏ö‡∏≤‡∏á"
          value={newMaterial.name}
          onChange={(e) => setNewMaterial({ ...newMaterial, name: e.target.value })}
        />
        <input
          placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠"
          value={newMaterial.buy}
          onChange={(e) => setNewMaterial({ ...newMaterial, buy: e.target.value })}
        />
        <input
          placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"
          value={newMaterial.sell}
          onChange={(e) => setNewMaterial({ ...newMaterial, sell: e.target.value })}
        />
        <button onClick={handleAdd}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°</button>
      </div>

      <table border="1" cellPadding="8" style={{ width: '100%', borderCollapse: 'collapse' }}>
        <thead style={{ backgroundColor: '#f0f0f0' }}>
          <tr>
            <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏™‡∏î‡∏∏</th>
            <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠</th>
            <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢</th>
            <th>‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô</th>
          </tr>
        </thead>
        <tbody>
          {materials.map((item) => {
            const profit = getProfit(item.buy, item.sell);
            return (
              <tr key={item.id}>
                <td>{item.name}</td>
                <td>{item.buy}</td>
                <td>{item.sell}</td>
                <td style={{ color: profit.color }}>{profit.text}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}

export default App;
